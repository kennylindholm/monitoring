---
- name: Deploy All Monitoring Stack Components
  hosts: monitoring_servers
  become: yes
  gather_facts: yes

  vars:
    # Global configuration
    monitoring_base_dir: /opt/monitoring
    monitoring_network_name: monitoring

    # Override specific component settings
    meta_prometheus_retention: "30d"
    meta_grafana_admin_password: "{{ vault_grafana_admin_password | default('SecurePassword123!') }}"
    meta_loki_retention_period: "744h"

    # Control which components to deploy
    monitoring_deploy_prometheus: true
    monitoring_deploy_grafana: true
    monitoring_deploy_loki: true
    monitoring_deploy_alertmanager: true
    monitoring_deploy_cadvisor: true

  pre_tasks:
    - name: Display deployment information
      debug:
        msg: |
          Starting monitoring stack deployment...
          Target host: {{ inventory_hostname }}
          Base directory: {{ monitoring_base_dir }}
          Components to deploy:
            - Prometheus: {{ monitoring_deploy_prometheus }}
            - Grafana: {{ monitoring_deploy_grafana }}
            - Loki: {{ monitoring_deploy_loki }}
            - Alertmanager: {{ monitoring_deploy_alertmanager }}
            - cAdvisor: {{ monitoring_deploy_cadvisor }}

    - name: Ensure system packages are up to date
      package:
        name: "*"
        state: latest
        update_cache: yes
      when: update_system_packages | default(false)

  roles:
    - role: monitoring-meta
      tags: [monitoring, full-stack]

  post_tasks:
    - name: Create deployment record
      copy:
        content: |
          Monitoring Stack Deployment Record
          ==================================
          Deployment Date: {{ ansible_date_time.iso8601 }}
          Deployed By: {{ ansible_user_id }}
          Target Host: {{ inventory_hostname }}
          Ansible Version: {{ ansible_version.full }}

          Components Deployed:
          {% if monitoring_deploy_prometheus %}
          - Prometheus {{ prometheus_image | default('latest') }}
          {% endif %}
          {% if monitoring_deploy_grafana %}
          - Grafana {{ grafana_image | default('latest') }}
          {% endif %}
          {% if monitoring_deploy_loki %}
          - Loki {{ loki_image | default('latest') }}
          {% endif %}
          {% if monitoring_deploy_alertmanager %}
          - Alertmanager {{ alertmanager_image | default('latest') }}
          {% endif %}
          {% if monitoring_deploy_cadvisor %}
          - cAdvisor {{ cadvisor_image | default('latest') }}
          {% endif %}

          Configuration:
          - Base Directory: {{ monitoring_base_dir }}
          - Network: {{ monitoring_network_name }}
          - Prometheus Retention: {{ meta_prometheus_retention }}
          - Loki Retention: {{ meta_loki_retention_period }}
        dest: "{{ monitoring_base_dir }}/deployment-record-{{ ansible_date_time.epoch }}.txt"
        mode: "0644"

    - name: Set up quick access aliases
      lineinfile:
        path: "/home/{{ ansible_user }}/.bashrc"
        line: "{{ item }}"
        state: present
        create: yes
      loop:
        - "alias mon-check='{{ monitoring_base_dir }}/scripts/check-services.sh'"
        - "alias mon-logs='{{ monitoring_base_dir }}/scripts/view-logs.sh'"
        - "alias mon-restart='{{ monitoring_base_dir }}/scripts/restart-service.sh'"
        - "alias mon-backup='{{ monitoring_base_dir }}/backup-monitoring.sh'"
      when: not ansible_check_mode

    - name: Create monitoring CLI tool
      copy:
        content: |
          #!/bin/bash
          # Monitoring Stack CLI Tool

          case "$1" in
            status)
              {{ monitoring_base_dir }}/scripts/check-services.sh
              ;;
            logs)
              {{ monitoring_base_dir }}/scripts/view-logs.sh $2
              ;;
            restart)
              {{ monitoring_base_dir }}/scripts/restart-service.sh $2
              ;;
            backup)
              {{ monitoring_base_dir }}/backup-monitoring.sh
              ;;
            urls)
              echo "Monitoring Stack URLs:"
              echo "====================="
              echo "Prometheus: http://{{ ansible_default_ipv4.address }}:{{ prometheus_port | default('9090') }}"
              echo "Grafana: http://{{ ansible_default_ipv4.address }}:{{ grafana_port | default('3000') }}"
              echo "Loki: http://{{ ansible_default_ipv4.address }}:{{ loki_port | default('3100') }}"
              echo "Alertmanager: http://{{ ansible_default_ipv4.address }}:{{ alertmanager_port | default('9093') }}"
              echo "cAdvisor: http://{{ ansible_default_ipv4.address }}:{{ cadvisor_port | default('8080') }}"
              ;;
            *)
              echo "Usage: $0 {status|logs|restart|backup|urls} [service]"
              exit 1
              ;;
          esac
        dest: /usr/local/bin/monitoring
        mode: "0755"

    - name: Generate documentation
      template:
        src: monitoring-docs.md.j2
        dest: "{{ monitoring_base_dir }}/DOCUMENTATION.md"
        mode: "0644"
      when: false # Template doesn't exist yet

    - name: Final deployment verification
      block:
        - name: Check all services are running
          command: "{{ monitoring_base_dir }}/scripts/check-services.sh"
          register: final_check
          changed_when: false
          failed_when: final_check.rc != 0

        - name: Display final status
          debug:
            var: final_check.stdout_lines

      rescue:
        - name: Display troubleshooting information
          debug:
            msg: |
              Some services may not be healthy. Please check:
              1. Docker service is running: systemctl status docker
              2. Network connectivity: docker network ls
              3. Container logs: docker logs <container_name>
              4. Disk space: df -h
              5. Memory usage: free -h

# Minimal deployment playbook
- name: Deploy Minimal Monitoring Stack
  hosts: monitoring_servers
  become: yes
  gather_facts: yes
  tags: [minimal, never]

  vars:
    # Deploy only core components
    monitoring_deploy_common: true
    monitoring_deploy_prometheus: true
    monitoring_deploy_grafana: true
    monitoring_deploy_loki: false
    monitoring_deploy_alertmanager: false
    monitoring_deploy_cadvisor: false

  roles:
    - monitoring-meta

# Update monitoring stack playbook
- name: Update Monitoring Stack Components
  hosts: monitoring_servers
  become: yes
  gather_facts: no
  tags: [update, never]

  tasks:
    - name: Pull latest images
      docker_image:
        name: "{{ item }}"
        source: pull
        force_source: yes
      loop:
        - "{{ prometheus_image | default('prom/prometheus:latest') }}"
        - "{{ grafana_image | default('grafana/grafana:latest') }}"
        - "{{ loki_image | default('grafana/loki:latest') }}"
        - "{{ alertmanager_image | default('prom/alertmanager:latest') }}"
        - "{{ cadvisor_image | default('gcr.io/cadvisor/cadvisor:latest') }}"

    - name: Restart monitoring services
      shell: |
        cd {{ monitoring_base_dir }}/{{ item }}
        docker compose down
        docker compose up -d
      loop:
        - prometheus
        - grafana
        - loki
        - alertmanager
        - cadvisor
      when: item in monitoring_deploy_components | default([])

# Backup monitoring data playbook
- name: Backup Monitoring Stack Data
  hosts: monitoring_servers
  become: yes
  gather_facts: no
  tags: [backup, never]

  tasks:
    - name: Run backup script
      command: "{{ monitoring_base_dir }}/backup-monitoring.sh"
      register: backup_result

    - name: Display backup result
      debug:
        var: backup_result.stdout_lines

    - name: Copy backup to remote location
      synchronize:
        src: "{{ monitoring_base_dir }}/backups/"
        dest: "{{ backup_remote_path }}/"
        mode: push
      when: backup_remote_path is defined
# Usage examples:
# Full deployment:
# ansible-playbook -i inventory deploy-monitoring-all.yml
#
# Minimal deployment:
# ansible-playbook -i inventory deploy-monitoring-all.yml --tags minimal
#
# Update components:
# ansible-playbook -i inventory deploy-monitoring-all.yml --tags update
#
# Backup data:
# ansible-playbook -i inventory deploy-monitoring-all.yml --tags backup
#
# Deploy with custom settings:
# ansible-playbook -i inventory deploy-monitoring-all.yml \
#   -e monitoring_deploy_loki=false \
#   -e monitoring_deploy_promtail=false
