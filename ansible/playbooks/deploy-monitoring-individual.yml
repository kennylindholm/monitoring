---
- name: Deploy Monitoring Stack with Individual Roles
  hosts: monitoring_servers
  become: true
  gather_facts: true

  vars:
    # Override default variables as needed
    monitoring_base_dir: /opt/monitoring
    monitoring_network_name: monitoring

    # Component-specific overrides
    prometheus_retention: "30d"
    grafana_admin_password: "admin123"
    loki_retention_period: "744h"

  pre_tasks:
    - name: Ensure system is updated
      apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"

  roles:
    # Deploy common prerequisites first
    - role: monitoring-common
      tags: [common, always]

    # Deploy core monitoring components
    - role: prometheus
      tags: [prometheus, metrics]
      vars:
        prometheus_scrape_configs:
          - job_name: "prometheus"
            static_configs:
              - targets: ["localhost:9090"]
          - job_name: "cadvisor"
            static_configs:
              - targets: ["cadvisor:8080"]

    - role: alertmanager
      tags: [alertmanager, alerts]
      vars:
        alertmanager_receivers:
          - name: "default"
            email_configs: []
            slack_configs: []
            webhook_configs: []

    - role: loki
      tags: [loki, logs]

    - role: grafana
      tags: [grafana, visualization]
      vars:
        grafana_datasources:
          - name: Prometheus
            type: prometheus
            access: proxy
            url: "http://prometheus:9090"
            isDefault: true
          - name: Loki
            type: loki
            access: proxy
            url: "http://loki:3100"

    # Note: Exporters are now deployed via separate playbooks
    # Run deploy-node-exporter.yml and deploy-cadvisor.yml separately

  post_tasks:
    - name: Wait for all services to stabilize
      pause:
        seconds: 30

    - name: Run service health check
      command: "{{ monitoring_base_dir }}/scripts/check-services.sh"
      register: health_check
      failed_when: health_check.rc != 0
      changed_when: false

    - name: Display health check results
      debug:
        var: health_check.stdout_lines

    - name: Create monitoring summary file
      template:
        src: monitoring-summary.txt.j2
        dest: "{{ monitoring_base_dir }}/MONITORING_SUMMARY.txt"
        mode: "0644"
      vars:
        deployment_date: "{{ ansible_date_time.iso8601 }}"

    - name: Display access information
      debug:
        msg: |
          ============================================
          Monitoring Stack Deployment Complete!
          ============================================

          Access URLs:
          - Prometheus: http://{{ ansible_default_ipv4.address }}:9090
          - Grafana: http://{{ ansible_default_ipv4.address }}:3000
            Username: admin
            Password: {{ grafana_admin_password }}
          - Loki: http://{{ ansible_default_ipv4.address }}:3100
          - Alertmanager: http://{{ ansible_default_ipv4.address }}:9093
          Note: Exporters are deployed separately for better modularity
          To deploy Node Exporter: ansible-playbook playbooks/deploy-node-exporter.yml
          To deploy cAdvisor: ansible-playbook playbooks/deploy-cadvisor.yml
          To deploy Promtail: ansible-playbook playbooks/deploy-promtail.yml

          Configuration files: {{ monitoring_base_dir }}

          To check service status:
          {{ monitoring_base_dir }}/scripts/check-services.sh

          To view logs:
          {{ monitoring_base_dir }}/scripts/view-logs.sh

          ============================================

- name: Configure Monitoring Components
  hosts: monitoring_servers
  become: true
  gather_facts: false
  tags: [configure, never]

  tasks:
    - name: Configure Prometheus scrape targets
      lineinfile:
        path: "{{ monitoring_base_dir }}/prometheus/configs/prometheus.yml"
        line: "      - targets: ['{{ item }}']"
        insertafter: "    static_configs:"
        state: present
      loop:
        - "app-server-1:8080"
        - "app-server-2:8080"
      notify: reload prometheus
      tags: [prometheus-config]

    - name: Import Grafana dashboards
      uri:
        url: "http://localhost:3000/api/dashboards/db"
        method: POST
        user: admin
        password: "{{ grafana_admin_password }}"
        force_basic_auth: yes
        body_format: json
        body:
          dashboard:
            title: "Custom Application Dashboard"
            panels: []
          overwrite: true
      tags: [grafana-config]

    - name: Configure Alertmanager receivers
      template:
        src: custom-receivers.yml.j2
        dest: "{{ monitoring_base_dir }}/alertmanager/configs/receivers.yml"
      notify: restart alertmanager
      tags: [alertmanager-config]

  handlers:
    - name: reload prometheus
      uri:
        url: "http://localhost:9090/-/reload"
        method: POST

    - name: restart alertmanager
      command: docker restart alertmanager

# Playbook for selective component deployment
- name: Deploy Specific Monitoring Components
  hosts: monitoring_servers
  become: true
  gather_facts: true
  tags: [selective, never]

  vars:
    deploy_prometheus: "{{ prometheus | default(false) }}"
    deploy_grafana: "{{ grafana | default(false) }}"
    deploy_loki: "{{ loki | default(false) }}"
    deploy_alertmanager: "{{ alertmanager | default(false) }}"
    deploy_exporters: "{{ exporters | default(false) }}"
    deploy_promtail: "{{ promtail | default(false) }}"

  tasks:
    - name: Deploy Prometheus only
      include_role:
        name: prometheus
      when: deploy_prometheus

    - name: Deploy Grafana only
      include_role:
        name: grafana
      when: deploy_grafana

    - name: Deploy Loki only
      include_role:
        name: loki
      when: deploy_loki

    - name: Deploy Alertmanager only
      include_role:
        name: alertmanager
      when: deploy_alertmanager

    - name: Deploy exporters only
      debug:
        msg: "Exporters are now deployed via separate playbooks. Use deploy-node-exporter.yml and deploy-cadvisor.yml"
      when: deploy_exporters

    - name: Note about Promtail deployment
      debug:
        msg: "Promtail should be deployed on client hosts using deploy-promtail.yml playbook"
      when: deploy_promtail
# Usage examples:
# Deploy core monitoring stack:
# ansible-playbook -i inventory deploy-monitoring-individual.yml
#
# Deploy with specific tags:
# ansible-playbook -i inventory deploy-monitoring-individual.yml --tags prometheus,grafana
#
# Configure components after deployment:
# ansible-playbook -i inventory deploy-monitoring-individual.yml --tags configure
#
# Deploy specific components only:
# ansible-playbook -i inventory deploy-monitoring-individual.yml --tags selective -e prometheus=true -e grafana=true
#
# Deploy exporters separately:
# ansible-playbook -i inventory playbooks/deploy-node-exporter.yml
# ansible-playbook -i inventory playbooks/deploy-cadvisor.yml
#
# Deploy Promtail on client hosts:
# ansible-playbook -i inventory playbooks/deploy-promtail.yml

# Promtail deployment on client hosts
- name: Deploy Promtail to Application Servers
  hosts: client_hosts
  become: true
  gather_facts: true
  tags: [promtail-clients, never]

  pre_tasks:
    - name: Display deployment information
      debug:
        msg: |
          Starting Promtail deployment to application servers...
          Target hosts: {{ ansible_play_hosts | join(', ') }}
          Loki server: {{ hostvars[groups['monitoring_servers'][0]]['ansible_host'] }}:3100

    - name: Verify connectivity to all hosts
      ping:

    - name: Check if Loki is accessible
      uri:
        url: "http://{{ hostvars[groups['monitoring_servers'][0]]['ansible_host'] }}:3100/ready"
        method: GET
        status_code: 200
        timeout: 10
      delegate_to: localhost
      run_once: true
      register: loki_check
      failed_when: false

    - name: Warn if Loki is not accessible
      debug:
        msg: "WARNING: Loki server is not accessible. Promtail will be installed but may not be able to send logs."
      when: loki_check is failed or loki_check.status is not defined or loki_check.status != 200
      run_once: true

  roles:
    - role: promtail

  post_tasks:
    - name: Verify Promtail installation
      systemd:
        name: promtail
      register: promtail_status

    - name: Display Promtail status
      debug:
        msg: |
          Promtail deployment completed on {{ inventory_hostname }}
          Service status: {{ promtail_status.status.ActiveState }}
          Metrics: http://{{ ansible_default_ipv4.address }}:9080/metrics
          Targets: http://{{ ansible_default_ipv4.address }}:9080/targets
