---
# Deploy Promtail to Application Servers
# This playbook installs Promtail directly on the host (not in containers)

- name: Deploy Promtail to Application Servers
  hosts: app_servers
  become: yes
  gather_facts: yes

  pre_tasks:
    - name: Display deployment information
      debug:
        msg: |
          Starting Promtail deployment to application servers...
          Target hosts: {{ ansible_play_hosts | join(', ') }}
          Loki server: {{ hostvars[groups['monitoring_servers'][0]]['ansible_host'] }}:3100

    - name: Verify connectivity to all hosts
      ping:

    - name: Check if Loki is accessible
      uri:
        url: "http://{{ hostvars[groups['monitoring_servers'][0]]['ansible_host'] }}:3100/ready"
        method: GET
        status_code: 200
        timeout: 10
      delegate_to: localhost
      run_once: true
      register: loki_check
      failed_when: false

    - name: Warn if Loki is not accessible
      debug:
        msg: "WARNING: Loki server is not accessible. Promtail will be installed but may not be able to send logs."
      when: loki_check is failed or loki_check.status is not defined or loki_check.status != 200
      run_once: true

  roles:
    - role: promtail-host

  post_tasks:
    - name: Verify Promtail installation
      systemd:
        name: promtail
      register: promtail_status

    - name: Check Promtail targets
      uri:
        url: "http://127.0.0.1:{{ promtail_http_listen_port }}/targets"
        method: GET
      register: promtail_targets
      failed_when: false

    - name: Display Promtail status
      debug:
        msg: |
          Promtail deployment completed on {{ inventory_hostname }}

          Service status: {{ promtail_status.status.ActiveState }}

          To view logs:
            journalctl -u promtail -f

          To check targets:
            curl http://{{ ansible_default_ipv4.address }}:{{ promtail_http_listen_port }}/targets

          To view metrics:
            curl http://{{ ansible_default_ipv4.address }}:{{ promtail_http_listen_port }}/metrics

    - name: Test log shipping
      block:
        - name: Create test log entry
          shell: |
            logger -t promtail-test "Test log from {{ inventory_hostname }} at $(date)"
          register: test_log

        - name: Wait for log to be processed
          pause:
            seconds: 5

        - name: Display test completion
          debug:
            msg: |
              Test log created. To verify in Grafana:
              1. Go to http://{{ hostvars[groups['monitoring_servers'][0]]['ansible_host'] }}:3000
              2. Navigate to Explore
              3. Select Loki data source
              4. Query: {hostname="{{ inventory_hostname }}"}
      tags: test

- name: Update Prometheus configuration to scrape Promtail metrics
  hosts: monitoring_servers
  become: yes
  gather_facts: yes
  tags: prometheus_config

  tasks:
    - name: Check if Prometheus configuration exists
      stat:
        path: /opt/monitoring/prometheus/configs/prometheus.yml
      register: prometheus_config

    - name: Read current Prometheus configuration
      slurp:
        src: /opt/monitoring/prometheus/configs/prometheus.yml
      register: prometheus_config_content
      when: prometheus_config.stat.exists

    - name: Check if Promtail job already exists
      set_fact:
        promtail_exists: '{{ ''job_name: "promtail"'' in (prometheus_config_content.content | b64decode) or "job_name: ''promtail''" in (prometheus_config_content.content | b64decode) }}'
      when: prometheus_config.stat.exists

    - name: Add Promtail job to Prometheus configuration
      lineinfile:
        path: /opt/monitoring/prometheus/configs/prometheus.yml
        line: |2
            - job_name: "promtail"
              static_configs:
                - targets:
                    - "{{ hostvars['app1']['ansible_host'] }}:9080"
                    - "{{ hostvars['app2']['ansible_host'] }}:9080"
              relabel_configs:
                - source_labels: [__address__]
                  regex: "([^:]+):.*"
                  target_label: instance
                  replacement: "$1"
        insertafter: "^scrape_configs:"
        state: present
      when:
        - prometheus_config.stat.exists
        - not promtail_exists | default(false)
      notify: reload prometheus

    - name: Validate Prometheus configuration
      command: |
        docker run --rm \
          -v /opt/monitoring/prometheus/configs/prometheus.yml:/prometheus.yml \
          -v /opt/monitoring/prometheus/configs/alert-rules.yml:/etc/prometheus/alert-rules.yml \
          --entrypoint promtool \
          prom/prometheus:latest \
          check config /prometheus.yml
      when: prometheus_config.stat.exists
      changed_when: false
      register: config_validation
      failed_when: false

    - name: Fix Prometheus configuration if validation failed
      block:
        - name: Copy fixed Prometheus configuration
          copy:
            content: |
              global:
                scrape_interval: 15s
                evaluation_interval: 15s
                external_labels:
                  monitor: "monitoring-system"

              rule_files:
                - "/etc/prometheus/alert-rules.yml"

              alerting:
                alertmanagers:
                  - static_configs:
                      - targets:
                          - alertmanager:9093

              scrape_configs:
                - job_name: "prometheus"
                  static_configs:
                    - targets: ["localhost:9090"]

                - job_name: "cadvisor"
                  static_configs:
                    - targets: ["cadvisor:8080"]

                - job_name: "alertmanager"
                  static_configs:
                    - targets: ["alertmanager:9093"]

                - job_name: "grafana"
                  static_configs:
                    - targets: ["grafana:3000"]

                - job_name: "loki"
                  static_configs:
                    - targets: ["loki:3100"]

                - job_name: "promtail"
                  static_configs:
                    - targets:
                        - "{{ hostvars['app1']['ansible_host'] }}:9080"
                        - "{{ hostvars['app2']['ansible_host'] }}:9080"
                  relabel_configs:
                    - source_labels: [__address__]
                      regex: "([^:]+):.*"
                      target_label: instance
                      replacement: "$1"
            dest: /opt/monitoring/prometheus/configs/prometheus.yml
            backup: yes
          notify: reload prometheus

        - name: Validate fixed configuration
          command: |
            docker run --rm \
              -v /opt/monitoring/prometheus/configs/prometheus.yml:/prometheus.yml \
              -v /opt/monitoring/prometheus/configs/alert-rules.yml:/etc/prometheus/alert-rules.yml \
              --entrypoint promtool \
              prom/prometheus:latest \
              check config /prometheus.yml
          changed_when: false
      when:
        - prometheus_config.stat.exists
        - config_validation.rc != 0

  handlers:
    - name: reload prometheus
      shell: |
        docker exec prometheus kill -HUP 1
      failed_when: false

- name: Display deployment summary
  hosts: localhost
  gather_facts: no
  run_once: true

  tasks:
    - name: Generate deployment report
      debug:
        msg: |
          ==========================================
          Promtail Deployment Summary
          ==========================================

          Deployed to hosts:
          {% for host in groups['app_servers'] %}
          - {{ host }} ({{ hostvars[host]['ansible_default_ipv4']['address'] }})
            Status: {{ hostvars[host]['promtail_status']['status']['ActiveState'] | default('Unknown') }}
            Metrics: http://{{ hostvars[host]['ansible_default_ipv4']['address'] }}:9080/metrics
            Targets: http://{{ hostvars[host]['ansible_default_ipv4']['address'] }}:9080/targets
          {% endfor %}

          Logs are being sent to:
          - Loki: http://{{ hostvars[groups['monitoring_servers'][0]]['ansible_host'] }}:3100

          View logs in Grafana:
          - URL: http://{{ hostvars[groups['monitoring_servers'][0]]['ansible_host'] }}:3000
          - Data source: Loki
          - Example queries:
            - All logs: {hostname=~".+"}
            - Specific host: {hostname="app1"}
            - System logs: {job="syslog"}
            - Auth logs: {job="auth"}
            - Journal: {job="systemd-journal"}

          ==========================================
