===========================
cAdvisor Deployment Summary
===========================

Deployment Information:
- Date: {{ deployment_date }}
- Host: {{ inventory_hostname }}
- IP Address: {{ ansible_default_ipv4.address }}
- OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
- Architecture: {{ ansible_architecture }}

Service Configuration:
- Port: {{ cadvisor_port | default('8080') }}
- Base Directory: {{ cadvisor_base_dir | default('/opt/monitoring/cadvisor') }}
- Container Name: {{ cadvisor_container_name | default('cadvisor') }}
- Image: {{ cadvisor_image | default('gcr.io/cadvisor/cadvisor:latest') }}
- Log Level: {{ cadvisor_log_level | default('0') }}
- Housekeeping Interval: {{ cadvisor_housekeeping_interval | default('10s') }}
- Global Housekeeping Interval: {{ cadvisor_global_housekeeping_interval | default('1m0s') }}
- Max Housekeeping Interval: {{ cadvisor_max_housekeeping_interval | default('15s') }}

Access URLs:
- Web UI: http://{{ ansible_default_ipv4.address }}:{{ cadvisor_port | default('8080') }}
- Metrics Endpoint: http://{{ ansible_default_ipv4.address }}:{{ cadvisor_port | default('8080') }}/metrics
- Health Check: http://{{ ansible_default_ipv4.address }}:{{ cadvisor_port | default('8080') }}/healthz
- Container Information: http://{{ ansible_default_ipv4.address }}:{{ cadvisor_port | default('8080') }}/containers/

Key Metrics Available:
- Container CPU Usage: container_cpu_usage_seconds_total
- Container Memory Usage: container_memory_usage_bytes
- Container Memory Limit: container_spec_memory_limit_bytes
- Container Network I/O: container_network_receive_bytes_total, container_network_transmit_bytes_total
- Container Filesystem Usage: container_fs_usage_bytes, container_fs_limit_bytes
- Container Filesystem I/O: container_fs_reads_total, container_fs_writes_total
- Container Process Count: container_processes
- Container Uptime: container_start_time_seconds
- Container Labels: container_label_*

Mounted Volumes:
{% for volume in cadvisor_volumes | default([]) %}
- {{ volume }}
{% endfor %}

Configuration Files:
- Docker Compose: {{ cadvisor_base_dir | default('/opt/monitoring/cadvisor') }}/docker-compose.yml

Management Commands:
- Check Status: docker ps --filter name=cadvisor
- View Logs: docker logs cadvisor
- Restart Service: docker restart cadvisor
- Stop Service: docker stop cadvisor
- Start Service: docker start cadvisor

Prometheus Scrape Configuration:
```yaml
scrape_configs:
  - job_name: 'cadvisor'
    static_configs:
      - targets: ['{{ ansible_default_ipv4.address }}:{{ cadvisor_port | default('8080') }}']
    scrape_interval: 15s
    metrics_path: /metrics
```

Health Check:
- URL: http://{{ ansible_default_ipv4.address }}:{{ cadvisor_port | default('8080') }}/healthz
- Expected Response: HTTP 200 with "ok" message
- Metrics URL: http://{{ ansible_default_ipv4.address }}:{{ cadvisor_port | default('8080') }}/metrics
- Expected Response: HTTP 200 with Prometheus metrics format

Web Interface Features:
- Real-time container resource usage
- Historical data visualization
- Container hierarchy view
- Process information within containers
- Network and filesystem statistics

Troubleshooting:
- Check container logs: docker logs cadvisor
- Verify Docker socket access: ls -la /var/run/docker.sock
- Check privileged mode: docker inspect cadvisor | grep Privileged
- Verify network connectivity: telnet {{ ansible_default_ipv4.address }} {{ cadvisor_port | default('8080') }}
- Check mounted volumes: docker inspect cadvisor | grep Mounts -A 20
- Restart service: cd {{ cadvisor_base_dir | default('/opt/monitoring/cadvisor') }} && docker compose restart

Performance Considerations:
- cAdvisor runs in privileged mode for full system access
- Housekeeping intervals can be adjusted for performance vs accuracy
- Container label collection can be limited with whitelists
- Resource limits can be applied to prevent excessive resource usage

Notes:
- cAdvisor requires privileged access to collect container metrics
- Exposes detailed container resource usage and performance data
- Automatically discovers all containers on the host
- Provides both web interface and Prometheus metrics endpoint
- Service restarts automatically on failure
