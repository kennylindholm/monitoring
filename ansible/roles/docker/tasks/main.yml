---
- name: Update apt package cache
  apt:
    update_cache: yes
    cache_valid_time: 3600

- name: Install prerequisite packages
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
    state: present

- name: Create directory for Docker's GPG key
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Add Docker's official GPG key
  shell: |
    curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
  args:
    creates: /etc/apt/keyrings/docker.gpg
  when: not ansible_check_mode

- name: Set permissions for Docker GPG key
  file:
    path: /etc/apt/keyrings/docker.gpg
    mode: '0644'
  when: not ansible_check_mode

- name: Add Docker repository
  shell: |
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
  args:
    creates: /etc/apt/sources.list.d/docker.list
  when: not ansible_check_mode

- name: Update apt package cache after adding Docker repository
  apt:
    update_cache: yes
  when: not ansible_check_mode

- name: Install Docker packages
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: present
  notify: start docker

- name: Add users to docker group
  user:
    name: "{{ item }}"
    groups: docker
    append: yes
  loop: "{{ docker_users | default([]) }}"
  when: docker_users is defined

- name: Ensure Docker service is started and enabled
  systemd:
    name: docker
    state: started
    enabled: yes

- name: Verify Docker installation
  command: docker --version
  register: docker_version
  changed_when: false
  when: not ansible_check_mode

- name: Display Docker version
  debug:
    msg: "Docker installed successfully: {{ docker_version.stdout }}"
  when: not ansible_check_mode and docker_version is defined