#!/bin/bash
# Monitoring Stack Backup Script
# This script backs up configuration files and data for native monitoring services
# Generated by Ansible - Do not edit manually

set -euo pipefail

# Configuration
MONITORING_DIR="{{ monitoring_base_dir }}"
BACKUP_DIR="{{ monitoring_backup_dir }}"
RETENTION_DAYS="{{ monitoring_backup_retention_days }}"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
BACKUP_PATH="${BACKUP_DIR}/${TIMESTAMP}"
LOG_FILE="${BACKUP_DIR}/backup.log"

# Services to backup
SERVICES=(
    "node_exporter"
    "prometheus"
    "grafana"
    "alertmanager"
    "loki"
    "promtail"
)

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Create backup directory
create_backup_dir() {
    if ! mkdir -p "$BACKUP_PATH"; then
        log "ERROR: Failed to create backup directory: $BACKUP_PATH"
        exit 1
    fi
    log "Created backup directory: $BACKUP_PATH"
}

# Stop services before backup
stop_services() {
    log "Stopping monitoring services..."
    for service in "${SERVICES[@]}"; do
        if systemctl is-active --quiet "$service" 2>/dev/null; then
            log "Stopping $service..."
            systemctl stop "$service" || log "WARNING: Failed to stop $service"
        else
            log "Service $service is not running or doesn't exist"
        fi
    done
}

# Start services after backup
start_services() {
    log "Starting monitoring services..."
    for service in "${SERVICES[@]}"; do
        if systemctl is-enabled --quiet "$service" 2>/dev/null; then
            log "Starting $service..."
            systemctl start "$service" || log "WARNING: Failed to start $service"
        else
            log "Service $service is not enabled or doesn't exist"
        fi
    done
}

# Backup configuration files
backup_configs() {
    log "Backing up configuration files..."

    # Create config backup directory
    mkdir -p "${BACKUP_PATH}/configs"

    # Backup systemd service files
    for service in "${SERVICES[@]}"; do
        if [ -f "/etc/systemd/system/${service}.service" ]; then
            cp "/etc/systemd/system/${service}.service" "${BACKUP_PATH}/configs/${service}.service" || log "WARNING: Failed to backup ${service}.service"
            log "Backed up systemd service file for $service"
        fi

        # Backup environment files
        for env_file in "/etc/default/${service}" "/etc/sysconfig/${service}"; do
            if [ -f "$env_file" ]; then
                cp "$env_file" "${BACKUP_PATH}/configs/$(basename $env_file)" || log "WARNING: Failed to backup $env_file"
                log "Backed up environment file: $env_file"
            fi
        done
    done

    # Backup service-specific configuration directories
    for service_dir in prometheus grafana alertmanager loki; do
        if [ -d "/etc/${service_dir}" ]; then
            cp -r "/etc/${service_dir}" "${BACKUP_PATH}/configs/" || log "WARNING: Failed to backup /etc/${service_dir}"
            log "Backed up configuration directory: /etc/${service_dir}"
        fi
    done

    # Backup monitoring base directory configs
    if [ -d "${MONITORING_DIR}/config" ]; then
        cp -r "${MONITORING_DIR}/config" "${BACKUP_PATH}/" || log "WARNING: Failed to backup ${MONITORING_DIR}/config"
        log "Backed up monitoring config directory"
    fi
}

# Backup data directories
backup_data() {
    log "Backing up data directories..."

    # Create data backup directory
    mkdir -p "${BACKUP_PATH}/data"

    # Backup service data directories
    for data_dir in \
        "${MONITORING_DIR}/data" \
        "/var/lib/prometheus" \
        "/var/lib/grafana" \
        "/var/lib/alertmanager" \
        "/var/lib/loki" \
        "/var/lib/node_exporter"; do

        if [ -d "$data_dir" ]; then
            service_name=$(basename "$data_dir")
            tar -czf "${BACKUP_PATH}/data/${service_name}_data.tar.gz" -C "$(dirname "$data_dir")" "$(basename "$data_dir")" || log "WARNING: Failed to backup $data_dir"
            log "Backed up data directory: $data_dir"
        fi
    done
}

# Backup SSL certificates
backup_ssl() {
    if [ -d "${MONITORING_DIR}/ssl" ]; then
        log "Backing up SSL certificates..."
        cp -r "${MONITORING_DIR}/ssl" "${BACKUP_PATH}/" || log "WARNING: Failed to backup SSL certificates"
        log "Backed up SSL certificates"
    fi
}

# Backup scripts
backup_scripts() {
    if [ -d "${MONITORING_DIR}/scripts" ]; then
        log "Backing up scripts..."
        cp -r "${MONITORING_DIR}/scripts" "${BACKUP_PATH}/" || log "WARNING: Failed to backup scripts"
        log "Backed up scripts directory"
    fi
}

# Check service status after backup
check_services() {
    log "Checking service status after backup..."
    for service in "${SERVICES[@]}"; do
        if systemctl is-active --quiet "$service" 2>/dev/null; then
            log "✓ $service is running"
        elif systemctl is-enabled --quiet "$service" 2>/dev/null; then
            log "✗ $service is enabled but not running"
        else
            log "- $service is not enabled"
        fi
    done
}

# Clean old backups
cleanup_old_backups() {
    log "Cleaning up backups older than $RETENTION_DAYS days..."
    find "$BACKUP_DIR" -maxdepth 1 -type d -name "[0-9]*_[0-9]*" -mtime +$RETENTION_DAYS -exec rm -rf {} \; || log "WARNING: Failed to clean some old backups"
    log "Cleanup completed"
}

# Create backup summary
create_summary() {
    local summary_file="${BACKUP_PATH}/backup_summary.txt"
    cat > "$summary_file" << EOF
Monitoring Stack Backup Summary
==============================

Backup Date: $(date)
Backup Path: $BACKUP_PATH
Hostname: $(hostname)
System: $(uname -a)

Services Status:
{% for service in monitoring_services | default([]) %}
- {{ service.name }}: $(systemctl is-active {{ service.name }} 2>/dev/null || echo "inactive")
{% endfor %}

Backup Contents:
- Configuration files
- Service data
- SSL certificates (if present)
- Scripts and utilities

Backup Size: $(du -sh "$BACKUP_PATH" | cut -f1)

Notes:
- This backup was created for native service installations
- No Docker containers or images are included
- Restore using the corresponding restore script
EOF
    log "Created backup summary: $summary_file"
}

# Main backup function
main() {
    log "Starting monitoring stack backup..."

    # Create necessary directories
    mkdir -p "$BACKUP_DIR"
    create_backup_dir

    # Perform backup steps
    backup_configs

    # Only stop services for data backup if explicitly configured
    {% if monitoring_backup_stop_services | default(false) %}
    stop_services
    backup_data
    start_services
    {% else %}
    backup_data
    {% endif %}

    backup_ssl
    backup_scripts
    create_summary

    # Post-backup tasks
    check_services
    cleanup_old_backups

    log "Backup completed successfully: $BACKUP_PATH"

    # Calculate and log backup size
    local backup_size=$(du -sh "$BACKUP_PATH" | cut -f1)
    log "Backup size: $backup_size"
}

# Error handling
trap 'log "ERROR: Backup failed on line $LINENO"' ERR

# Run main function
main "$@"
