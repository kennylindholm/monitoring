#!/bin/bash
# Monitoring Stack Backup Script
# Generated by Ansible - Do not edit manually

set -euo pipefail

# Configuration
BACKUP_DIR="{{ monitoring_backup_dir }}"
MONITORING_DIR="{{ monitoring_base_dir }}"
RETENTION_DAYS="{{ monitoring_backup_retention_days }}"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_NAME="monitoring_backup_${TIMESTAMP}"
BACKUP_PATH="${BACKUP_DIR}/${BACKUP_NAME}"

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*"
}

# Error handling
error_exit() {
    log "ERROR: $1"
    exit 1
}

# Create backup directory if it doesn't exist
mkdir -p "${BACKUP_DIR}" || error_exit "Failed to create backup directory"

log "Starting monitoring stack backup..."

# Create temporary backup directory
mkdir -p "${BACKUP_PATH}" || error_exit "Failed to create backup path"

# Stop monitoring services to ensure data consistency
log "Stopping monitoring services..."
{% for service in ['prometheus', 'grafana', 'loki', 'alertmanager'] %}
if [ -d "${MONITORING_DIR}/{{ service }}" ]; then
    cd "${MONITORING_DIR}/{{ service }}" && docker compose -p {{ service }} down || log "WARNING: Failed to stop {{ service }}"
fi
{% endfor %}

# Backup Prometheus data
if [ -d "${MONITORING_DIR}/prometheus/data" ]; then
    log "Backing up Prometheus data..."
    tar -czf "${BACKUP_PATH}/prometheus_data.tar.gz" -C "${MONITORING_DIR}/prometheus" data configs || log "WARNING: Failed to backup Prometheus data"
fi

# Backup Grafana data
if [ -d "${MONITORING_DIR}/grafana/data" ]; then
    log "Backing up Grafana data..."
    tar -czf "${BACKUP_PATH}/grafana_data.tar.gz" -C "${MONITORING_DIR}/grafana" data provisioning || log "WARNING: Failed to backup Grafana data"
fi

# Backup Loki data
if [ -d "${MONITORING_DIR}/loki/data" ]; then
    log "Backing up Loki data..."
    tar -czf "${BACKUP_PATH}/loki_data.tar.gz" -C "${MONITORING_DIR}/loki" data configs || log "WARNING: Failed to backup Loki data"
fi

# Backup Alertmanager data
if [ -d "${MONITORING_DIR}/alertmanager/data" ]; then
    log "Backing up Alertmanager data..."
    tar -czf "${BACKUP_PATH}/alertmanager_data.tar.gz" -C "${MONITORING_DIR}/alertmanager" data configs || log "WARNING: Failed to backup Alertmanager data"
fi

# Backup configurations
log "Backing up configurations..."
for service in prometheus grafana loki alertmanager node-exporter cadvisor promtail; do
    if [ -f "${MONITORING_DIR}/${service}/docker-compose.yml" ]; then
        cp "${MONITORING_DIR}/${service}/docker-compose.yml" "${BACKUP_PATH}/${service}_docker-compose.yml" || log "WARNING: Failed to backup ${service} docker-compose.yml"
    fi
done

# Start monitoring services again
log "Starting monitoring services..."
{% for service in ['prometheus', 'grafana', 'loki', 'alertmanager'] %}
if [ -d "${MONITORING_DIR}/{{ service }}" ]; then
    cd "${MONITORING_DIR}/{{ service }}" && docker compose -p {{ service }} up -d || log "WARNING: Failed to start {{ service }}"
fi
{% endfor %}

# Create compressed archive of the backup
log "Creating compressed backup archive..."
cd "${BACKUP_DIR}"
tar -czf "${BACKUP_NAME}.tar.gz" "${BACKUP_NAME}" || error_exit "Failed to create backup archive"

# Remove temporary backup directory
rm -rf "${BACKUP_PATH}"

# Calculate backup size
BACKUP_SIZE=$(du -h "${BACKUP_DIR}/${BACKUP_NAME}.tar.gz" | cut -f1)
log "Backup completed: ${BACKUP_NAME}.tar.gz (${BACKUP_SIZE})"

# Clean up old backups
log "Cleaning up old backups (keeping last ${RETENTION_DAYS} days)..."
find "${BACKUP_DIR}" -name "monitoring_backup_*.tar.gz" -type f -mtime +${RETENTION_DAYS} -delete

# List remaining backups
log "Remaining backups:"
ls -lh "${BACKUP_DIR}"/monitoring_backup_*.tar.gz 2>/dev/null || log "No backups found"

# Verify services are running
log "Verifying services are running..."
for service in prometheus grafana loki alertmanager; do
    if docker ps | grep -q "${service}"; then
        log "✓ ${service} is running"
    else
        log "✗ ${service} is not running"
    fi
done

log "Backup process completed successfully"

# Optional: Send notification
{% if monitoring_notification_email %}
echo "Monitoring backup completed at $(date). Backup size: ${BACKUP_SIZE}" | mail -s "Monitoring Backup Success" {{ monitoring_notification_email }}
{% endif %}

{% if monitoring_notification_slack_webhook %}
curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"Monitoring backup completed successfully. Size: ${BACKUP_SIZE}\"}" {{ monitoring_notification_slack_webhook }}
{% endif %}
