#!/bin/bash
# Monitoring Stack Service Check Script
# Generated by Ansible - Do not edit manually

set -euo pipefail

# Configuration
MONITORING_DIR="{{ monitoring_base_dir }}"
SERVICES=(prometheus grafana loki alertmanager node-exporter cadvisor promtail)

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Counters
RUNNING=0
STOPPED=0
UNHEALTHY=0

# Function to check if a service is running
check_service() {
    local service=$1
    local status="UNKNOWN"
    local health="UNKNOWN"
    local port=""

    # Define ports for each service
    case $service in
        prometheus) port="{{ prometheus_port | default('9090') }}" ;;
        grafana) port="{{ grafana_port | default('3000') }}" ;;
        loki) port="{{ loki_port | default('3100') }}" ;;
        alertmanager) port="{{ alertmanager_port | default('9093') }}" ;;
        node-exporter) port="{{ node_exporter_port | default('9100') }}" ;;
        cadvisor) port="{{ cadvisor_port | default('8080') }}" ;;
        promtail) port="{{ promtail_port | default('9080') }}" ;;
    esac

    # Check if container is running
    if docker ps --format '{{ '{{' }}.Names{{ '}}' }}' | grep -q "^${service}$"; then
        status="${GREEN}RUNNING${NC}"
        ((RUNNING++))

        # Check health endpoint
        if [ -n "$port" ]; then
            case $service in
                prometheus|alertmanager)
                    health_endpoint="http://localhost:${port}/-/ready"
                    ;;
                grafana)
                    health_endpoint="http://localhost:${port}/api/health"
                    ;;
                loki|promtail)
                    health_endpoint="http://localhost:${port}/ready"
                    ;;
                node-exporter)
                    health_endpoint="http://localhost:${port}/metrics"
                    ;;
                cadvisor)
                    health_endpoint="http://localhost:${port}/healthz"
                    ;;
            esac

            if curl -sf "$health_endpoint" > /dev/null 2>&1; then
                health="${GREEN}HEALTHY${NC}"
            else
                health="${YELLOW}UNHEALTHY${NC}"
                ((UNHEALTHY++))
            fi
        fi
    else
        status="${RED}STOPPED${NC}"
        health="${RED}N/A${NC}"
        ((STOPPED++))
    fi

    printf "%-15s %-20s %-15s %s\n" "$service" "$status" "$health" "Port: ${port:-N/A}"
}

# Function to check disk usage
check_disk_usage() {
    echo -e "\n${YELLOW}Disk Usage:${NC}"
    echo "----------------------------------------"

    for service in "${SERVICES[@]}"; do
        if [ -d "${MONITORING_DIR}/${service}" ]; then
            size=$(du -sh "${MONITORING_DIR}/${service}" 2>/dev/null | cut -f1)
            printf "%-15s %s\n" "$service:" "$size"
        fi
    done

    total_size=$(du -sh "${MONITORING_DIR}" 2>/dev/null | cut -f1)
    echo "----------------------------------------"
    printf "%-15s %s\n" "Total:" "$total_size"
}

# Function to check system resources
check_system_resources() {
    echo -e "\n${YELLOW}System Resources:${NC}"
    echo "----------------------------------------"

    # CPU usage
    cpu_usage=$(top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1}')
    printf "CPU Usage:      %.1f%%\n" "$cpu_usage"

    # Memory usage
    mem_info=$(free | grep Mem)
    mem_total=$(echo $mem_info | awk '{print $2}')
    mem_used=$(echo $mem_info | awk '{print $3}')
    mem_percent=$(awk "BEGIN {printf \"%.1f\", $mem_used/$mem_total*100}")
    printf "Memory Usage:   %.1f%%\n" "$mem_percent"

    # Disk usage for monitoring directory
    disk_usage=$(df -h "${MONITORING_DIR}" | tail -1 | awk '{print $5}' | sed 's/%//')
    printf "Disk Usage:     %s%%\n" "$disk_usage"

    # Docker info
    docker_version=$(docker --version | cut -d' ' -f3 | sed 's/,$//')
    printf "Docker Version: %s\n" "$docker_version"
}

# Function to check recent alerts
check_recent_alerts() {
    echo -e "\n${YELLOW}Recent Alerts (last 5):${NC}"
    echo "----------------------------------------"

    if command -v amtool &> /dev/null && [ -n "{{ alertmanager_port | default('') }}" ]; then
        alerts=$(amtool --alertmanager.url="http://localhost:{{ alertmanager_port | default('9093') }}" alert query --limit 5 2>/dev/null || echo "No alerts or Alertmanager not accessible")
        echo "$alerts"
    else
        echo "Alertmanager not configured or amtool not available"
    fi
}

# Main execution
clear
echo "========================================"
echo "   Monitoring Stack Service Status"
echo "========================================"
echo "Time: $(date)"
echo ""

# Check each service
echo -e "${YELLOW}Service Status:${NC}"
echo "----------------------------------------"
printf "%-15s %-20s %-15s %s\n" "SERVICE" "STATUS" "HEALTH" "PORT"
echo "----------------------------------------"

for service in "${SERVICES[@]}"; do
    check_service "$service"
done

echo "----------------------------------------"
echo -e "Summary: ${GREEN}$RUNNING running${NC}, ${RED}$STOPPED stopped${NC}, ${YELLOW}$UNHEALTHY unhealthy${NC}"

# Additional checks
check_disk_usage
check_system_resources
check_recent_alerts

# Network check
echo -e "\n${YELLOW}Network Status:${NC}"
echo "----------------------------------------"
if docker network ls | grep -q "{{ monitoring_network_name | default('monitoring') }}"; then
    echo -e "Monitoring network: ${GREEN}Active${NC}"
    # Count containers on the network
    container_count=$(docker network inspect {{ monitoring_network_name | default('monitoring') }} -f '{{ '{{' }}len .Containers{{ '}}' }}' 2>/dev/null || echo "0")
    echo "Containers on network: $container_count"
else
    echo -e "Monitoring network: ${RED}Not found${NC}"
fi

# Exit code based on service status
if [ $STOPPED -gt 0 ] || [ $UNHEALTHY -gt 0 ]; then
    echo -e "\n${RED}Warning: Some services are not healthy!${NC}"
    exit 1
else
    echo -e "\n${GREEN}All services are healthy!${NC}"
    exit 0
fi
