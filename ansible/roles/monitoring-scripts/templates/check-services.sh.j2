#!/bin/bash
{% raw %}
# Monitoring Services Health Check Script
# This script checks the status of native monitoring services
# Generated by Ansible - Do not edit manually

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
{% endraw %}
MONITORING_DIR="{{ monitoring_base_dir }}"
LOG_FILE="${MONITORING_DIR}/logs/service-check.log"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

# Services to check
SERVICES=(
{% for service in monitoring_services | default([]) %}
    "{{ service.name }}"
{% endfor %}
)

# Service endpoints for health checks
declare -A SERVICE_ENDPOINTS=(
{% for service in monitoring_services | default([]) %}
    ["{{ service.name }}"]="http://localhost:{{ service.port }}{{ service.path | default('/') }}"
{% endfor %}
)

{% raw %}
# Counters
TOTAL_SERVICES=${#SERVICES[@]}
RUNNING_SERVICES=0
FAILED_SERVICES=0

# Logging function
log() {
    echo "[${TIMESTAMP}] $1" | tee -a "$LOG_FILE"
}

# Print header
print_header() {
    echo -e "${BLUE}================================================${NC}"
    echo -e "${BLUE}   Monitoring Services Health Check Report${NC}"
    echo -e "${BLUE}================================================${NC}"
    echo -e "Hostname: $(hostname -f)"
    echo -e "Date: ${TIMESTAMP}"
    echo -e "Check performed by: $(whoami)"
    echo ""
}

# Check if service is installed
is_service_installed() {
    local service="$1"
    systemctl list-unit-files "${service}.service" &>/dev/null
}

# Check if service is active
is_service_active() {
    local service="$1"
    systemctl is-active --quiet "$service" 2>/dev/null
}

# Check if service is enabled
is_service_enabled() {
    local service="$1"
    systemctl is-enabled --quiet "$service" 2>/dev/null
}

# Get service status
get_service_status() {
    local service="$1"

    if ! is_service_installed "$service"; then
        echo "NOT_INSTALLED"
        return
    fi

    if is_service_active "$service"; then
        if is_service_enabled "$service"; then
            echo "RUNNING"
        else
            echo "RUNNING_DISABLED"
        fi
    else
        if is_service_enabled "$service"; then
            echo "STOPPED_ENABLED"
        else
            echo "STOPPED_DISABLED"
        fi
    fi
}

# Get service uptime
get_service_uptime() {
    local service="$1"
    if is_service_active "$service"; then
        systemctl show "$service" --property=ActiveEnterTimestamp --value 2>/dev/null | head -n1
    else
        echo "N/A"
    fi
}

# Check HTTP endpoint
check_endpoint() {
    local url="$1"
    local timeout=5

    if command -v curl >/dev/null 2>&1; then
        if curl -s --max-time $timeout --fail "$url" >/dev/null 2>&1; then
            return 0
        fi
    elif command -v wget >/dev/null 2>&1; then
        if wget -q --timeout=$timeout --tries=1 --spider "$url" >/dev/null 2>&1; then
            return 0
        fi
    fi
    return 1
}

# Check individual service
check_service() {
    local service="$1"
    local status
    status=$(get_service_status "$service")

    printf "%-20s " "$service:"

    case "$status" in
        "RUNNING")
            echo -e "${GREEN}RUNNING${NC}"
            ((RUNNING_SERVICES++))

            # Check endpoint if available
            if [[ -n "${SERVICE_ENDPOINTS[$service]:-}" ]]; then
                printf "%-20s " "  └─ Endpoint:"
                if check_endpoint "${SERVICE_ENDPOINTS[$service]}"; then
                    echo -e "${GREEN}ACCESSIBLE${NC}"
                else
                    echo -e "${YELLOW}UNREACHABLE${NC}"
                fi
            fi
            ;;
        "RUNNING_DISABLED")
            echo -e "${YELLOW}RUNNING (not enabled)${NC}"
            ((RUNNING_SERVICES++))
            ;;
        "STOPPED_ENABLED")
            echo -e "${RED}STOPPED (enabled)${NC}"
            ((FAILED_SERVICES++))
            ;;
        "STOPPED_DISABLED")
            echo -e "${RED}STOPPED (disabled)${NC}"
            ((FAILED_SERVICES++))
            ;;
        "NOT_INSTALLED")
            echo -e "${RED}NOT INSTALLED${NC}"
            ((FAILED_SERVICES++))
            ;;
        *)
            echo -e "${RED}UNKNOWN${NC}"
            ((FAILED_SERVICES++))
            ;;
    esac

    # Show additional info for active services
    if [[ "$status" == "RUNNING" || "$status" == "RUNNING_DISABLED" ]]; then
        local uptime
        uptime=$(get_service_uptime "$service")
        if [[ "$uptime" != "N/A" && -n "$uptime" ]]; then
            printf "%-20s %s\n" "  └─ Started:" "$uptime"
        fi

        # Show memory usage
        local memory_usage
        memory_usage=$(systemctl show "$service" --property=MemoryCurrent --value 2>/dev/null || echo "N/A")
        if [[ "$memory_usage" != "N/A" && "$memory_usage" != "[not set]" && "$memory_usage" -gt 0 ]]; then
            local memory_mb=$((memory_usage / 1024 / 1024))
            printf "%-20s %s MB\n" "  └─ Memory:" "$memory_mb"
        fi
    fi

    echo ""
}

# Show system information
show_system_info() {
    echo -e "${BLUE}System Information:${NC}"
    echo "=================="

    # System load
    local load_avg
    load_avg=$(uptime | awk -F'load average:' '{print $2}' | tr -d ' ')
    printf "%-20s %s\n" "Load Average:" "$load_avg"

    # Memory usage
    local memory_info
    memory_info=$(free -h | awk 'NR==2{printf "%.1f%% (%s/%s)", $3/$2*100, $3, $2}')
    printf "%-20s %s\n" "Memory Usage:" "$memory_info"

    # Disk usage for monitoring directory
    if [[ -d "$MONITORING_DIR" ]]; then
        local disk_usage
        disk_usage=$(df -h "$MONITORING_DIR" | awk 'NR==2{print $5}' | tr -d '%')
        printf "%-20s %s%%\n" "Monitoring Disk:" "$disk_usage"
    fi

    # System uptime
    local system_uptime
    system_uptime=$(uptime -p 2>/dev/null || uptime | awk -F'up ' '{print $2}' | awk -F',' '{print $1}')
    printf "%-20s %s\n" "System Uptime:" "$system_uptime"

    echo ""
}

# Show service ports
show_service_ports() {
    echo -e "${BLUE}Service Ports:${NC}"
    echo "=============="

    for service in "${SERVICES[@]}"; do
        if is_service_active "$service"; then
            # Extract port from service endpoints or use common ports
            local port=""
            if [[ -n "${SERVICE_ENDPOINTS[$service]:-}" ]]; then
                port=$(echo "${SERVICE_ENDPOINTS[$service]}" | grep -oP ':\K\d+')
            fi

            if [[ -n "$port" ]]; then
                printf "%-20s " "$service:"
                if netstat -tlnp 2>/dev/null | grep -q ":$port "; then
                    echo -e "${GREEN}$port (listening)${NC}"
                else
                    echo -e "${RED}$port (not listening)${NC}"
                fi
            fi
        fi
    done
    echo ""
}

# Show logs for failed services
show_failed_service_logs() {
    if [[ $FAILED_SERVICES -gt 0 ]]; then
        echo -e "${BLUE}Recent Logs for Failed Services:${NC}"
        echo "================================="

        for service in "${SERVICES[@]}"; do
            local status
            status=$(get_service_status "$service")
            if [[ "$status" =~ ^(STOPPED|NOT_INSTALLED) ]]; then
                echo -e "${YELLOW}Logs for $service:${NC}"
                journalctl -u "$service" --no-pager --lines=5 --since="1 hour ago" 2>/dev/null || echo "  No logs available"
                echo ""
            fi
        done
    fi
}

# Generate summary
generate_summary() {
    echo -e "${BLUE}Summary:${NC}"
    echo "========"
    printf "Total Services:   %d\n" $TOTAL_SERVICES
    printf "Running Services: %s%d%s\n" "${GREEN}" $RUNNING_SERVICES "${NC}"
    printf "Failed Services:  %s%d%s\n" "${RED}" $FAILED_SERVICES "${NC}"

    local health_percentage=$((RUNNING_SERVICES * 100 / TOTAL_SERVICES))
    printf "Health Score:     "

    if [[ $health_percentage -eq 100 ]]; then
        echo -e "${GREEN}${health_percentage}%${NC} - All services healthy"
    elif [[ $health_percentage -ge 80 ]]; then
        echo -e "${YELLOW}${health_percentage}%${NC} - Mostly healthy"
    else
        echo -e "${RED}${health_percentage}%${NC} - Attention required"
    fi

    echo ""
}

# Provide recommendations
show_recommendations() {
    if [[ $FAILED_SERVICES -gt 0 ]]; then
        echo -e "${BLUE}Recommendations:${NC}"
        echo "================"

        for service in "${SERVICES[@]}"; do
            local status
            status=$(get_service_status "$service")
            case "$status" in
                "NOT_INSTALLED")
                    echo -e "• Install $service: ${YELLOW}sudo systemctl enable $service && sudo systemctl start $service${NC}"
                    ;;
                "STOPPED_ENABLED")
                    echo -e "• Start $service: ${YELLOW}sudo systemctl start $service${NC}"
                    ;;
                "STOPPED_DISABLED")
                    echo -e "• Enable and start $service: ${YELLOW}sudo systemctl enable $service && sudo systemctl start $service${NC}"
                    ;;
            esac
        done
        echo ""
    fi
}

# Main function
main() {
    # Create log directory if it doesn't exist
    mkdir -p "$(dirname "$LOG_FILE")"

    # Print header
    print_header

    # Check each service
    echo -e "${BLUE}Service Status:${NC}"
    echo "==============="
    for service in "${SERVICES[@]}"; do
        check_service "$service"
    done

    # Show additional information
    show_system_info
    show_service_ports
    show_failed_service_logs
    generate_summary
    show_recommendations

    # Log the check
    log "Health check completed - Running: $RUNNING_SERVICES/$TOTAL_SERVICES"

    # Exit with appropriate code
    if [[ $FAILED_SERVICES -eq 0 ]]; then
        exit 0
    else
        exit 1
    fi
}

# Handle command line arguments
case "${1:-}" in
    --quiet|-q)
        # Quiet mode - only show summary
        for service in "${SERVICES[@]}"; do
            status=$(get_service_status "$service")
            case "$status" in
                "RUNNING"|"RUNNING_DISABLED") ((RUNNING_SERVICES++)) ;;
                *) ((FAILED_SERVICES++)) ;;
            esac
        done
        generate_summary
        [[ $FAILED_SERVICES -eq 0 ]] && exit 0 || exit 1
        ;;
    --help|-h)
        echo "Usage: $0 [OPTIONS]"
        echo "Options:"
        echo "  --quiet, -q    Show only summary"
        echo "  --help, -h     Show this help message"
        echo "  --version, -v  Show script version"
        exit 0
        ;;
    --version|-v)
        echo "Monitoring Services Health Check v1.0"
        echo "Generated by Ansible for native service monitoring"
        exit 0
        ;;
    *)
        main "$@"
        ;;
esac
{% endraw %}
