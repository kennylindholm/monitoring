#!/bin/bash
{% raw %}
# Monitoring Services Status Script
# This script provides detailed status information for monitoring services
# Generated by Ansible - Do not edit manually

set -euo pipefail

# Configuration
{% endraw %}
MONITORING_DIR="{{ monitoring_base_dir }}"
{% raw %}
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

# Services to check
{% endraw %}
SERVICES=(
{% for service in monitoring_services | default([]) %}
    "{{ service.name }}"
{% endfor %}
)

{% raw %}
# Service endpoints for health checks
{% endraw %}
declare -A SERVICE_ENDPOINTS=(
{% for service in monitoring_services | default([]) %}
    ["{{ service.name }}"]="http://localhost:{{ service.port }}{{ service.path | default('/') }}"
{% endfor %}
)

{% raw %}
# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m'

# Utility functions
print_header() {
    echo -e "${BLUE}${BOLD}================================================${NC}"
    echo -e "${BLUE}${BOLD}   Monitoring Services Status Dashboard${NC}"
    echo -e "${BLUE}${BOLD}================================================${NC}"
    echo -e "Hostname: ${CYAN}$(hostname -f)${NC}"
    echo -e "Date: ${CYAN}${TIMESTAMP}${NC}"
    echo -e "User: ${CYAN}$(whoami)${NC}"
    echo ""
}

is_service_installed() {
    local service="$1"
    systemctl list-unit-files "${service}.service" &>/dev/null
}

is_service_active() {
    local service="$1"
    systemctl is-active --quiet "$service" 2>/dev/null
}

is_service_enabled() {
    local service="$1"
    systemctl is-enabled --quiet "$service" 2>/dev/null
}

get_service_status() {
    local service="$1"

    if ! is_service_installed "$service"; then
        echo "NOT_INSTALLED"
        return
    fi

    local active_status enabled_status
    active_status=$(systemctl is-active "$service" 2>/dev/null || echo "inactive")
    enabled_status=$(systemctl is-enabled "$service" 2>/dev/null || echo "disabled")

    echo "${active_status}:${enabled_status}"
}

get_service_uptime() {
    local service="$1"
    if is_service_active "$service"; then
        local start_time
        start_time=$(systemctl show "$service" --property=ActiveEnterTimestamp --value 2>/dev/null)
        if [[ -n "$start_time" && "$start_time" != "n/a" ]]; then
            echo "$start_time"
        else
            echo "Unknown"
        fi
    else
        echo "Not running"
    fi
}

get_service_memory() {
    local service="$1"
    if is_service_active "$service"; then
        local memory_bytes
        memory_bytes=$(systemctl show "$service" --property=MemoryCurrent --value 2>/dev/null || echo "0")
        if [[ "$memory_bytes" =~ ^[0-9]+$ ]] && [[ "$memory_bytes" -gt 0 ]]; then
            echo $((memory_bytes / 1024 / 1024))
        else
            echo "N/A"
        fi
    else
        echo "N/A"
    fi
}

get_service_pid() {
    local service="$1"
    if is_service_active "$service"; then
        systemctl show "$service" --property=MainPID --value 2>/dev/null || echo "N/A"
    else
        echo "N/A"
    fi
}

check_endpoint() {
    local url="$1"
    local timeout=5

    if command -v curl >/dev/null 2>&1; then
        if curl -s --max-time $timeout --fail "$url" >/dev/null 2>&1; then
            return 0
        fi
    elif command -v wget >/dev/null 2>&1; then
        if wget -q --timeout=$timeout --tries=1 --spider "$url" >/dev/null 2>&1; then
            return 0
        fi
    fi
    return 1
}

format_status() {
    local status="$1"
    local active="${status%:*}"
    local enabled="${status#*:}"

    case "$active" in
        "active")
            if [[ "$enabled" == "enabled" ]]; then
                echo -e "${GREEN}Running (enabled)${NC}"
            else
                echo -e "${YELLOW}Running (disabled)${NC}"
            fi
            ;;
        "inactive"|"failed")
            if [[ "$enabled" == "enabled" ]]; then
                echo -e "${RED}Stopped (enabled)${NC}"
            else
                echo -e "${RED}Stopped (disabled)${NC}"
            fi
            ;;
        "NOT_INSTALLED")
            echo -e "${RED}Not installed${NC}"
            ;;
        *)
            echo -e "${YELLOW}${active} (${enabled})${NC}"
            ;;
    esac
}

format_uptime() {
    local uptime_str="$1"
    if [[ "$uptime_str" == "Not running" || "$uptime_str" == "Unknown" ]]; then
        echo "$uptime_str"
    else
        # Convert to relative time
        local start_epoch
        start_epoch=$(date -d "$uptime_str" +%s 2>/dev/null || echo "0")
        local now_epoch
        now_epoch=$(date +%s)
        local uptime_seconds=$((now_epoch - start_epoch))

        if [[ $uptime_seconds -lt 60 ]]; then
            echo "${uptime_seconds}s"
        elif [[ $uptime_seconds -lt 3600 ]]; then
            echo "$((uptime_seconds / 60))m"
        elif [[ $uptime_seconds -lt 86400 ]]; then
            echo "$((uptime_seconds / 3600))h $((uptime_seconds % 3600 / 60))m"
        else
            echo "$((uptime_seconds / 86400))d $((uptime_seconds % 86400 / 3600))h"
        fi
    fi
}

show_service_details() {
    echo -e "${BLUE}${BOLD}Service Details:${NC}"
    echo -e "${BLUE}================${NC}"

    for service in "${SERVICES[@]}"; do
        local status uptime memory_mb pid
        status=$(get_service_status "$service")
        uptime=$(get_service_uptime "$service")
        memory_mb=$(get_service_memory "$service")
        pid=$(get_service_pid "$service")

        echo -e "${BOLD}${service}:${NC}"
        printf "  %-15s %s\n" "Status:" "$(format_status "$status")"
        printf "  %-15s %s\n" "Uptime:" "$(format_uptime "$uptime")"
        printf "  %-15s %s MB\n" "Memory:" "$memory_mb"
        printf "  %-15s %s\n" "PID:" "$pid"

        # Check endpoint if available
        if [[ -n "${SERVICE_ENDPOINTS[$service]:-}" ]]; then
            printf "  %-15s " "Endpoint:"
            if check_endpoint "${SERVICE_ENDPOINTS[$service]}"; then
                echo -e "${GREEN}Accessible${NC}"
            else
                echo -e "${RED}Unreachable${NC}"
            fi
            printf "  %-15s %s\n" "URL:" "${SERVICE_ENDPOINTS[$service]}"
        fi

        # Show configuration file if exists
        local config_files=(
            "/etc/systemd/system/${service}.service"
            "/etc/default/${service}"
            "/etc/sysconfig/${service}"
        )

        for config_file in "${config_files[@]}"; do
            if [[ -f "$config_file" ]]; then
                printf "  %-15s %s\n" "Config:" "$config_file"
                break
            fi
        done

        echo ""
    done
}

show_system_overview() {
    echo -e "${BLUE}${BOLD}System Overview:${NC}"
    echo -e "${BLUE}================${NC}"

    # System load
    local load_avg
    load_avg=$(uptime | awk -F'load average:' '{print $2}' | tr -d ' ')
    printf "%-20s %s\n" "Load Average:" "$load_avg"

    # Memory usage
    local memory_info
    memory_info=$(free -h | awk 'NR==2{printf "%s/%s (%.1f%%)", $3, $2, $3/$2*100}')
    printf "%-20s %s\n" "Memory Usage:" "$memory_info"

    # Disk usage for monitoring directory
    if [[ -d "$MONITORING_DIR" ]]; then
        local disk_usage
        disk_usage=$(df -h "$MONITORING_DIR" | awk 'NR==2{printf "%s/%s (%s)", $3, $2, $5}')
        printf "%-20s %s\n" "Monitoring Disk:" "$disk_usage"
    fi

    # System uptime
    local system_uptime
    system_uptime=$(uptime -p 2>/dev/null || uptime | awk -F'up ' '{print $2}' | awk -F',' '{print $1}')
    printf "%-20s %s\n" "System Uptime:" "$system_uptime"

    # Number of processes
    local process_count
    process_count=$(ps aux | wc -l)
    printf "%-20s %s\n" "Total Processes:" "$process_count"

    echo ""
}

show_port_status() {
    echo -e "${BLUE}${BOLD}Port Status:${NC}"
    echo -e "${BLUE}============${NC}"

    for service in "${SERVICES[@]}"; do
        if [[ -n "${SERVICE_ENDPOINTS[$service]:-}" ]]; then
            local port
            port=$(echo "${SERVICE_ENDPOINTS[$service]}" | grep -oP ':\K\d+')

            printf "%-20s " "${service}:"
            if netstat -tlnp 2>/dev/null | grep -q ":$port "; then
                echo -e "${GREEN}$port (listening)${NC}"
            else
                echo -e "${RED}$port (not listening)${NC}"
            fi
        fi
    done
    echo ""
}

show_recent_logs() {
    echo -e "${BLUE}${BOLD}Recent Service Logs (last 5 lines):${NC}"
    echo -e "${BLUE}====================================${NC}"

    for service in "${SERVICES[@]}"; do
        if is_service_installed "$service"; then
            echo -e "${BOLD}${service}:${NC}"
            journalctl -u "$service" --no-pager --lines=5 --since="1 hour ago" 2>/dev/null | sed 's/^/  /' || echo "  No recent logs"
            echo ""
        fi
    done
}

show_service_summary() {
    local total_services=${#SERVICES[@]}
    local running_services=0
    local failed_services=0

    for service in "${SERVICES[@]}"; do
        local status
        status=$(get_service_status "$service")
        if [[ "$status" =~ ^active: ]]; then
            ((running_services++))
        else
            ((failed_services++))
        fi
    done

    echo -e "${BLUE}${BOLD}Summary:${NC}"
    echo -e "${BLUE}========${NC}"
    printf "Total Services:   %d\n" $total_services
    printf "Running Services: %s%d%s\n" "${GREEN}" $running_services "${NC}"
    printf "Failed Services:  %s%d%s\n" "${RED}" $failed_services "${NC}"

    local health_percentage=$((running_services * 100 / total_services))
    printf "Health Score:     "

    if [[ $health_percentage -eq 100 ]]; then
        echo -e "${GREEN}${health_percentage}%${NC} - All services healthy"
    elif [[ $health_percentage -ge 80 ]]; then
        echo -e "${YELLOW}${health_percentage}%${NC} - Mostly healthy"
    else
        echo -e "${RED}${health_percentage}%${NC} - Attention required"
    fi

    echo ""
}

show_management_commands() {
    echo -e "${BLUE}${BOLD}Management Commands:${NC}"
    echo -e "${BLUE}===================${NC}"
    echo "Service Control:"
    echo "  sudo systemctl start <service>    - Start a service"
    echo "  sudo systemctl stop <service>     - Stop a service"
    echo "  sudo systemctl restart <service>  - Restart a service"
    echo "  sudo systemctl enable <service>   - Enable service at boot"
    echo "  sudo systemctl disable <service>  - Disable service at boot"
    echo ""
    echo "Monitoring:"
    echo "  sudo systemctl status <service>   - Show detailed status"
    echo "  sudo journalctl -u <service> -f   - Follow service logs"
    echo "  sudo journalctl -u <service> --since='1 hour ago' - Recent logs"
    echo ""
    echo "Available services: ${SERVICES[*]}"
    echo ""
}

main() {
    print_header
    show_service_details
    show_system_overview
    show_port_status
    show_service_summary

    # Exit with appropriate code
    local failed_count=0
    for service in "${SERVICES[@]}"; do
        local status
        status=$(get_service_status "$service")
        if [[ ! "$status" =~ ^active: ]]; then
            ((failed_count++))
        fi
    done

    [[ $failed_count -eq 0 ]] && exit 0 || exit 1
}

# Handle command line arguments
case "${1:-}" in
    --summary|-s)
        print_header
        show_service_summary
        ;;
    --logs|-l)
        print_header
        show_recent_logs
        ;;
    --ports|-p)
        print_header
        show_port_status
        ;;
    --help|-h)
        echo "Usage: $0 [OPTIONS]"
        echo "Options:"
        echo "  --summary, -s  Show only summary"
        echo "  --logs, -l     Show recent logs"
        echo "  --ports, -p    Show port status"
        echo "  --help, -h     Show this help"
        echo "  --commands, -c Show management commands"
        exit 0
        ;;
    --commands|-c)
        print_header
        show_management_commands
        ;;
    *)
        main "$@"
        ;;
esac
{% endraw %}
