#!/bin/bash

# Monitoring Stack Management Script
# Generated by Ansible

set -e

STACK_DIR="{{ monitoring_stack_dir }}"
COMPOSE_FILE="$STACK_DIR/docker-compose.yml"

cd "$STACK_DIR"

function show_help() {
    echo "Monitoring Stack Management Script"
    echo ""
    echo "Usage: $0 [COMMAND]"
    echo ""
    echo "Commands:"
    echo "  start       Start the monitoring stack"
    echo "  stop        Stop the monitoring stack"
    echo "  restart     Restart the monitoring stack"
    echo "  status      Show status of all services"
    echo "  logs        Show logs from all services"
    echo "  logs-f      Follow logs from all services"
    echo "  update      Pull latest images and restart"
    echo "  backup      Create backup of configuration and data"
    echo "  restore     Restore from backup"
    echo "  health      Check health of all services"
    echo "  urls        Show service URLs"
    echo "  cleanup     Remove unused images and volumes"
    echo "  help        Show this help message"
    echo ""
    echo "Service-specific commands:"
    echo "  prometheus  [start|stop|restart|logs]"
    echo "  grafana     [start|stop|restart|logs]"
    echo "  loki        [start|stop|restart|logs]"
    echo "  alertmanager [start|stop|restart|logs]"
    echo "  node-exporter [start|stop|restart|logs]"
    echo "  cadvisor    [start|stop|restart|logs]"
    echo "  promtail    [start|stop|restart|logs]"
}

function check_docker() {
    if ! command -v docker &> /dev/null; then
        echo "Error: Docker is not installed or not in PATH"
        exit 1
    fi
    
    if ! docker compose version &> /dev/null; then
        echo "Error: Docker Compose is not available"
        exit 1
    fi
}

function start_stack() {
    echo "Starting monitoring stack..."
    docker compose -f "$COMPOSE_FILE" up -d
    echo "Monitoring stack started successfully!"
    show_urls
}

function stop_stack() {
    echo "Stopping monitoring stack..."
    docker compose -f "$COMPOSE_FILE" down
    echo "Monitoring stack stopped successfully!"
}

function restart_stack() {
    echo "Restarting monitoring stack..."
    docker compose -f "$COMPOSE_FILE" restart
    echo "Monitoring stack restarted successfully!"
}

function show_status() {
    echo "Monitoring stack status:"
    docker compose -f "$COMPOSE_FILE" ps
}

function show_logs() {
    if [ "$1" = "-f" ]; then
        docker compose -f "$COMPOSE_FILE" logs -f
    else
        docker compose -f "$COMPOSE_FILE" logs
    fi
}

function update_stack() {
    echo "Updating monitoring stack..."
    docker compose -f "$COMPOSE_FILE" pull
    docker compose -f "$COMPOSE_FILE" up -d
    echo "Monitoring stack updated successfully!"
}

function backup_stack() {
    BACKUP_DIR="$STACK_DIR/backups/$(date +%Y%m%d_%H%M%S)"
    echo "Creating backup in $BACKUP_DIR..."
    
    mkdir -p "$BACKUP_DIR"
    
    # Backup configurations
    cp -r configs "$BACKUP_DIR/"
    cp docker-compose.yml "$BACKUP_DIR/"
    
    # Backup data (stop services first for consistency)
    echo "Stopping services for consistent backup..."
    docker compose -f "$COMPOSE_FILE" stop
    
    # Create data archives
    if [ -d "prometheus/data" ]; then
        tar -czf "$BACKUP_DIR/prometheus-data.tar.gz" prometheus/data
    fi
    if [ -d "grafana/data" ]; then
        tar -czf "$BACKUP_DIR/grafana-data.tar.gz" grafana/data
    fi
    if [ -d "loki/data" ]; then
        tar -czf "$BACKUP_DIR/loki-data.tar.gz" loki/data
    fi
    if [ -d "alertmanager/data" ]; then
        tar -czf "$BACKUP_DIR/alertmanager-data.tar.gz" alertmanager/data
    fi
    
    # Restart services
    echo "Restarting services..."
    docker compose -f "$COMPOSE_FILE" start
    
    echo "Backup completed: $BACKUP_DIR"
}

function restore_stack() {
    if [ -z "$2" ]; then
        echo "Usage: $0 restore <backup_directory>"
        echo "Available backups:"
        ls -la "$STACK_DIR/backups/" 2>/dev/null || echo "No backups found"
        exit 1
    fi
    
    BACKUP_DIR="$2"
    if [ ! -d "$BACKUP_DIR" ]; then
        echo "Error: Backup directory $BACKUP_DIR not found"
        exit 1
    fi
    
    echo "Restoring from $BACKUP_DIR..."
    echo "Warning: This will overwrite current data. Continue? (y/N)"
    read -r confirm
    if [ "$confirm" != "y" ]; then
        echo "Restore cancelled"
        exit 0
    fi
    
    # Stop services
    docker compose -f "$COMPOSE_FILE" down
    
    # Restore configurations
    if [ -d "$BACKUP_DIR/configs" ]; then
        cp -r "$BACKUP_DIR/configs" .
    fi
    if [ -f "$BACKUP_DIR/docker-compose.yml" ]; then
        cp "$BACKUP_DIR/docker-compose.yml" .
    fi
    
    # Restore data
    if [ -f "$BACKUP_DIR/prometheus-data.tar.gz" ]; then
        rm -rf prometheus/data
        tar -xzf "$BACKUP_DIR/prometheus-data.tar.gz"
    fi
    if [ -f "$BACKUP_DIR/grafana-data.tar.gz" ]; then
        rm -rf grafana/data
        tar -xzf "$BACKUP_DIR/grafana-data.tar.gz"
    fi
    if [ -f "$BACKUP_DIR/loki-data.tar.gz" ]; then
        rm -rf loki/data
        tar -xzf "$BACKUP_DIR/loki-data.tar.gz"
    fi
    if [ -f "$BACKUP_DIR/alertmanager-data.tar.gz" ]; then
        rm -rf alertmanager/data
        tar -xzf "$BACKUP_DIR/alertmanager-data.tar.gz"
    fi
    
    # Start services
    docker compose -f "$COMPOSE_FILE" up -d
    
    echo "Restore completed successfully!"
}

function check_health() {
    echo "Checking health of monitoring services..."
    echo ""
    
    services=(
        "prometheus:{{ prometheus_port }}:/api/v1/query?query=up"
        "grafana:{{ grafana_port }}:/api/health"
        "loki:{{ loki_port }}:/ready"
        "alertmanager:{{ alertmanager_port }}:/-/ready"
    )
    
    for service in "${services[@]}"; do
        IFS=':' read -r name port path <<< "$service"
        echo -n "Checking $name... "
        
        if curl -s -f "http://localhost:$port$path" > /dev/null; then
            echo "✓ Healthy"
        else
            echo "✗ Unhealthy"
        fi
    done
}

function show_urls() {
    echo ""
    echo "Monitoring Services:"
    echo "==================="
    echo "Grafana:      http://{{ ansible_default_ipv4.address }}:{{ grafana_port }}"
    echo "              Login: {{ grafana_admin_user }} / {{ grafana_admin_password }}"
    echo ""
    echo "Prometheus:   http://{{ ansible_default_ipv4.address }}:{{ prometheus_port }}"
    echo "Loki:         http://{{ ansible_default_ipv4.address }}:{{ loki_port }}"
    echo "Alertmanager: http://{{ ansible_default_ipv4.address }}:{{ alertmanager_port }}"
    {% if node_exporter_enabled %}
    echo "Node Exporter: http://{{ ansible_default_ipv4.address }}:{{ node_exporter_port }}"
    {% endif %}
    {% if cadvisor_enabled %}
    echo "cAdvisor:     http://{{ ansible_default_ipv4.address }}:{{ cadvisor_port }}"
    {% endif %}
    echo ""
}

function cleanup() {
    echo "Cleaning up unused Docker resources..."
    docker system prune -f
    docker volume prune -f
    echo "Cleanup completed!"
}

function manage_service() {
    service="$1"
    action="$2"
    
    case "$action" in
        start|stop|restart)
            docker compose -f "$COMPOSE_FILE" "$action" "$service"
            ;;
        logs)
            docker compose -f "$COMPOSE_FILE" logs -f "$service"
            ;;
        *)
            echo "Usage: $0 $service [start|stop|restart|logs]"
            exit 1
            ;;
    esac
}

# Main script logic
check_docker

case "$1" in
    start)
        start_stack
        ;;
    stop)
        stop_stack
        ;;
    restart)
        restart_stack
        ;;
    status)
        show_status
        ;;
    logs)
        show_logs
        ;;
    logs-f)
        show_logs -f
        ;;
    update)
        update_stack
        ;;
    backup)
        backup_stack
        ;;
    restore)
        restore_stack "$@"
        ;;
    health)
        check_health
        ;;
    urls)
        show_urls
        ;;
    cleanup)
        cleanup
        ;;
    prometheus|grafana|loki|alertmanager|node-exporter|cadvisor|promtail)
        manage_service "$1" "$2"
        ;;
    help|--help|-h)
        show_help
        ;;
    "")
        show_help
        ;;
    *)
        echo "Unknown command: $1"
        echo "Use '$0 help' for usage information"
        exit 1
        ;;
esac