---
- name: Create node_exporter system group
  group:
    name: "{{ node_exporter_group }}"
    system: yes
    state: present

- name: Create node_exporter system user
  user:
    name: "{{ node_exporter_user }}"
    group: "{{ node_exporter_group }}"
    system: yes
    shell: "{{ node_exporter_shell }}"
    home: "{{ node_exporter_home }}"
    createhome: no
    state: present

- name: Create node_exporter directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ node_exporter_user }}"
    group: "{{ node_exporter_group }}"
    mode: "0755"
  loop:
    - "{{ node_exporter_config_dir }}"
    - "{{ node_exporter_data_dir }}"
    - "{{ node_exporter_log_dir }}"
    - "{{ node_exporter_textfile_directory }}"

- name: Check if node_exporter binary exists
  stat:
    path: "{{ node_exporter_install_dir }}/node_exporter"
  register: node_exporter_binary_check

- name: Get installed node_exporter version
  command: "{{ node_exporter_install_dir }}/node_exporter --version"
  register: node_exporter_current_version
  failed_when: false
  changed_when: false
  when: node_exporter_binary_check.stat.exists

- name: Set node_exporter version facts
  set_fact:
    node_exporter_installed_version: "{{ node_exporter_current_version.stdout_lines[0].split()[2] if node_exporter_current_version.stdout_lines is defined else 'none' }}"
    node_exporter_needs_update: "{{ not node_exporter_binary_check.stat.exists or (node_exporter_current_version.stdout_lines is defined and node_exporter_version not in node_exporter_current_version.stdout_lines[0]) }}"

- name: Download node_exporter checksums
  get_url:
    url: "{{ node_exporter_checksums_url }}"
    dest: "{{ node_exporter_temp_dir }}/node_exporter_checksums.txt"
    mode: "0644"
    force: yes
  register: node_exporter_checksums_download
  when: node_exporter_needs_update

- name: Read node_exporter checksums file
  slurp:
    src: "{{ node_exporter_temp_dir }}/node_exporter_checksums.txt"
  register: node_exporter_checksums_response
  when: node_exporter_needs_update

- name: Extract node_exporter checksum
  set_fact:
    node_exporter_checksum: "{{ item.split()[0] }}"
  loop: "{{ (node_exporter_checksums_response.content | b64decode).split('\n') }}"
  when:
    - node_exporter_needs_update
    - node_exporter_checksums_response is defined
    - node_exporter_checksums_response.content is defined
    - "'node_exporter-' + node_exporter_version + '.linux-amd64.tar.gz' in item"

- name: Download node_exporter binary archive
  get_url:
    url: "{{ node_exporter_binary_url }}"
    dest: "{{ node_exporter_temp_dir }}/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz"
    checksum: "sha256:{{ node_exporter_checksum }}"
    mode: "0644"
  register: node_exporter_download
  when: node_exporter_needs_update

- name: Extract node_exporter binary archive
  unarchive:
    src: "{{ node_exporter_temp_dir }}/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz"
    dest: "{{ node_exporter_temp_dir }}"
    remote_src: yes
    creates: "{{ node_exporter_temp_dir }}/node_exporter-{{ node_exporter_version }}.linux-amd64"
  when: node_exporter_needs_update

- name: Install node_exporter binary
  copy:
    src: "{{ node_exporter_temp_dir }}/node_exporter-{{ node_exporter_version }}.linux-amd64/node_exporter"
    dest: "{{ node_exporter_install_dir }}/node_exporter"
    remote_src: yes
    owner: root
    group: root
    mode: "0755"
  notify: restart node-exporter
  when: node_exporter_needs_update

- name: Create node_exporter systemd service file
  template:
    src: node_exporter.service.j2
    dest: /etc/systemd/system/node_exporter.service
    owner: root
    group: root
    mode: "0644"
  notify:
    - reload systemd
    - restart node-exporter

- name: Create node_exporter sysconfig file
  template:
    src: node_exporter.j2
    dest: /etc/sysconfig/node_exporter
    owner: root
    group: root
    mode: "0644"
  notify: restart node-exporter
  when: ansible_os_family == "RedHat"

- name: Create node_exporter default file
  template:
    src: node_exporter.j2
    dest: /etc/default/node_exporter
    owner: root
    group: root
    mode: "0644"
  notify: restart node-exporter
  when: ansible_os_family == "Debian"

- name: Enable and start node_exporter service
  systemd:
    name: node_exporter
    enabled: "{{ node_exporter_service_enabled }}"
    state: "{{ node_exporter_service_state }}"
    daemon_reload: yes

- name: Configure firewall for node_exporter (firewalld)
  firewalld:
    port: "{{ node_exporter_port }}/tcp"
    permanent: yes
    state: enabled
    zone: "{{ node_exporter_firewall_zone }}"
    immediate: yes
  when:
    - node_exporter_firewall_enabled
    - ansible_facts['os_family'] == "RedHat"
    - ansible_facts['pkg_mgr'] == "dnf" or ansible_facts['pkg_mgr'] == "yum"
  ignore_errors: yes

- name: Configure firewall for node_exporter (ufw)
  ufw:
    rule: allow
    port: "{{ node_exporter_port }}"
    proto: tcp
  when:
    - node_exporter_firewall_enabled
    - ansible_facts['os_family'] == "Debian"
  ignore_errors: yes

- name: Clean up downloaded files
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ node_exporter_temp_dir }}/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz"
    - "{{ node_exporter_temp_dir }}/node_exporter-{{ node_exporter_version }}.linux-amd64"
    - "{{ node_exporter_temp_dir }}/node_exporter_checksums.txt"
  when: node_exporter_needs_update

- name: Wait for node_exporter to be ready
  wait_for:
    port: "{{ node_exporter_port }}"
    host: localhost
    delay: 5
    timeout: 60
  when: not ansible_check_mode

- name: Verify node_exporter is responding
  uri:
    url: "http://localhost:{{ node_exporter_port }}/metrics"
    method: GET
    status_code: 200
    timeout: 30
  register: node_exporter_test
  retries: 5
  delay: 10
  when: not ansible_check_mode

- name: Check node_exporter metrics endpoint
  uri:
    url: "http://localhost:{{ node_exporter_port }}/metrics"
    method: GET
    status_code: 200
  register: node_exporter_metrics
  failed_when: false

- name: Verify system metrics are present
  assert:
    that:
      - "'node_cpu_seconds_total' in node_exporter_metrics.content"
      - "'node_memory_MemTotal_bytes' in node_exporter_metrics.content"
      - "'node_filesystem_size_bytes' in node_exporter_metrics.content"
      - "'node_network_receive_bytes_total' in node_exporter_metrics.content"
    fail_msg: "Node Exporter is not collecting expected system metrics"
    success_msg: "Node Exporter is collecting system metrics successfully"
  when: node_exporter_metrics is defined and node_exporter_metrics.content is defined

- name: Display node_exporter service status
  debug:
    msg: |
      Node Exporter installed successfully!

      Service Information:
      - Status: {{ node_exporter_service_state }}
      - Version: {{ node_exporter_version }}
      - Binary location: {{ node_exporter_install_dir }}/node_exporter
      - Service file: /etc/systemd/system/node_exporter.service
      - Data directory: {{ node_exporter_data_dir }}
      - Log directory: {{ node_exporter_log_dir }}
      - Textfile collector: {{ node_exporter_textfile_directory }}

      Access Information:
      - Metrics endpoint: http://{{ ansible_default_ipv4.address }}:{{ node_exporter_port }}/metrics
      - Listen address: {{ node_exporter_web_listen_address }}

      Key metrics being collected:
      - CPU usage (node_cpu_seconds_total)
      - Memory usage (node_memory_*)
      - Disk usage (node_filesystem_*)
      - Network I/O (node_network_*)
      - Load average (node_load*)
      - System uptime (node_boot_time_seconds)

      Management commands:
      - Check status: sudo systemctl status node_exporter
      - View logs: sudo journalctl -u node_exporter -f
      - Restart service: sudo systemctl restart node_exporter

      To add this to Prometheus, use the following scrape config:
        - job_name: 'node-exporter'
          static_configs:
            - targets: ['{{ ansible_default_ipv4.address }}:{{ node_exporter_port }}']
